package config

import (
	"fmt"
	"log"
	"os"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	
    "backend-task/internal/models"
)

var DB *gorm.DB

func ConnectDatabase() {
	
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=UTC",
		getEnv("DB_HOST", "localhost"),
		getEnv("DB_USER", "postgres"),
		getEnv("DB_PASSWORD", "root"),
		getEnv("DB_NAME", "backend_task"),
		getEnv("DB_PORT", "5432"),
	)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("❌ Failed to connect to database:", err)
	}

	DB = db
	fmt.Println("✅ Database connected successfully!")
}

func getEnv(key, fallback string) string {
	
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	
	return fallback
}



func ConnectDB() (*gorm.DB, error) {
	
    dsn := fmt.Sprintf(
	
        "host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
        os.Getenv("DB_HOST"), os.Getenv("DB_USER"),
        os.Getenv("DB_PASSWORD"), os.Getenv("DB_NAME"), os.Getenv("DB_PORT"),
    )

    db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	
    if err != nil {
        return nil, err
    }

    // Auto migrate
    db.AutoMigrate(&models.User{})
    return db, nil
}
