{
    "swagger": "2.0",
    "info": {
        "description": "REST API in Go (Gin + GORM) with automatic group assignment.",
        "title": "Backend Task API",
        "contact": {
            "name": "Mohammad Ali Abu-Dalou",
            "email": "mohammad_abudalou@hotmail.com"
        },
        "version": "1.0"
    },
    "host": "51.21.3.224:8080",
    "basePath": "/api/v1",
    "paths": {
        "/users": {
            "get": {
                "description": "Returns a list of users, optionally filtered by group using query parameter (e.g., adult-1, senior-2).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Search users by group / List all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group name",
                        "name": "group",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates new users and assigns them to groups automatically ( up to 3 per group ).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create one or more users.",
                "parameters": [
                    {
                        "description": "User info array",
                        "name": "users",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CreateUserReq"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or email already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieve a user by their unique UUID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request or invalid ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update user name and/or email by ID ( group cannot be updated manually ).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request or invalid ID or email already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateUserReq": {
            "type": "object",
            "required": [
                "date_of_birth",
                "email",
                "name"
            ],
            "properties": {
                "date_of_birth": {
                    "type": "string",
                    "example": "1990-01-01"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "models.UpdateUserReq": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jane@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "Jane Doe"
                }
            }
        },
        "models.User": {
            "description": "User Entity That Is Stored In The Database.",
            "type": "object",
            "required": [
                "date_of_birth",
                "email",
                "name"
            ],
            "properties": {
                "created_at": {
                    "description": "Timestamp When The Record Was Created.",
                    "type": "string",
                    "example": "2025-09-01T12:00:00Z"
                },
                "date_of_birth": {
                    "description": "Date Of Birth In YYYY-MM-DD Format ( Must Be In The Past ).\n@Required",
                    "type": "string",
                    "example": "1990-05-15"
                },
                "email": {
                    "description": "Email Address ( Unique, Valid format ).\n@Required",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "group": {
                    "description": "Group Assignment ( Computed, Read-Only ).",
                    "type": "string",
                    "readOnly": true,
                    "example": "adult-1"
                },
                "id": {
                    "description": "User Unique Identifier ( UUID ).\n@Required",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "description": "Full Name Of The User.\n@Required",
                    "type": "string",
                    "example": "John Doe"
                },
                "updated_at": {
                    "description": "Timestamp When The Record Was Last Updated.",
                    "type": "string",
                    "example": "2025-09-01T12:30:00Z"
                }
            }
        },
        "utils.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}