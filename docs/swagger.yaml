basePath: /api/v1
definitions:
  models.CreateUserReq:
    properties:
      date_of_birth:
        example: "1990-01-01"
        type: string
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
    required:
    - date_of_birth
    - email
    - name
    type: object
  models.UpdateUserReq:
    properties:
      email:
        example: jane@example.com
        type: string
      name:
        example: Jane Doe
        type: string
    type: object
  models.User:
    description: User Entity That Is Stored In The Database.
    properties:
      created_at:
        description: Timestamp When The Record Was Created.
        example: "2025-09-01T12:00:00Z"
        type: string
      date_of_birth:
        description: |-
          Date Of Birth In YYYY-MM-DD Format ( Must Be In The Past ).
          @Required
        example: "1990-05-15"
        type: string
      email:
        description: |-
          Email Address ( Unique, Valid format ).
          @Required
        example: john.doe@example.com
        type: string
      group:
        description: Group Assignment ( Computed, Read-Only ).
        example: adult-1
        readOnly: true
        type: string
      id:
        description: |-
          User Unique Identifier ( UUID ).
          @Required
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        description: |-
          Full Name Of The User.
          @Required
        example: John Doe
        type: string
      updated_at:
        description: Timestamp When The Record Was Last Updated.
        example: "2025-09-01T12:30:00Z"
        type: string
    required:
    - date_of_birth
    - email
    - name
    type: object
  utils.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: mohammad_abudalou@hotmail.com
    name: Mohammad Ali Abu-Dalou
  description: REST API in Go (Gin + GORM) with automatic group assignment.
  title: Backend Task API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Returns a list of users, optionally filtered by group using query
        parameter (e.g., adult-1, senior-2).
      parameters:
      - description: Group name
        in: query
        name: group
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Search users by group / List all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates new users and assigns them to groups automatically ( up
        to 3 per group ).
      parameters:
      - description: User info array
        in: body
        name: users
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateUserReq'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Invalid request or email already exists
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create one or more users.
      tags:
      - users
  /users/{id}:
    get:
      description: Retrieve a user by their unique UUID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request or invalid ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get user by ID.
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user name and/or email by ID ( group cannot be updated manually
        ).
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request or invalid ID or email already exists
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update a user.
      tags:
      - users
swagger: "2.0"
