// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "backend-task/internal/user/models"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

// FindAllocatableGroupTx provides a mock function with given fields: gormDB, base
func (_m *GroupRepository) FindAllocatableGroupTx(gormDB *gorm.DB, base string) (*models.Group, error) {
	ret := _m.Called(gormDB, base)

	if len(ret) == 0 {
		panic("no return value specified for FindAllocatableGroupTx")
	}

	var r0 *models.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (*models.Group, error)); ok {
		return rf(gormDB, base)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *models.Group); ok {
		r0 = rf(gormDB, base)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(gormDB, base)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementGroupCountTx provides a mock function with given fields: gormDB, name
func (_m *GroupRepository) IncrementGroupCountTx(gormDB *gorm.DB, name string) error {
	ret := _m.Called(gormDB, name)

	if len(ret) == 0 {
		panic("no return value specified for IncrementGroupCountTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(gormDB, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGroupRepository creates a new instance of GroupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupRepository {
	mock := &GroupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
