// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "backend-task/internal/user/models"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: name, email, dob
func (_m *UserService) CreateUser(name string, email string, dob string) (*models.User, error) {
	ret := _m.Called(name, email, dob)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*models.User, error)); ok {
		return rf(name, email, dob)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *models.User); ok {
		r0 = rf(name, email, dob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(name, email, dob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserService) GetUserByID(id string) (*models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsersByFilter provides a mock function with given fields: group
func (_m *UserService) ListUsersByFilter(group string) ([]*models.User, error) {
	ret := _m.Called(group)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersByFilter")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.User, error)); ok {
		return rf(group)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.User); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, name, email
func (_m *UserService) UpdateUser(id string, name *string, email *string) (*models.User, error) {
	ret := _m.Called(id, name, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, *string) (*models.User, error)); ok {
		return rf(id, name, email)
	}
	if rf, ok := ret.Get(0).(func(string, *string, *string) *models.User); ok {
		r0 = rf(id, name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string, *string) error); ok {
		r1 = rf(id, name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
